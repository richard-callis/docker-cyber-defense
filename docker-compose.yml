version: '3.6'

services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Don't do this in production!
    volumes:
      - /etc/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - bridge
    labels:
      - "traefik.enable=false"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=Host(` traefik.lan `)"

  elasticsearch:
    image: "elasticsearch:8.1.3"
    container_name: "elasticsearch"
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
    networks:
      - bridge
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elastic.entrypoints=web"
      - "traefik.http.routers.elastic.rule=Host(` elastic.lan `)"

  logstash:
    image: "logstash:8.1.3"
    container_name: "logstash"
    restart: unless-stopped
    volumes:
      - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf
    depends_on:
      - elasticsearch
    ports:
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - bridge
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logstash.entrypoints=web"
      - "traefik.http.routers.logstash.rule=Host(` logstash.lan `)"

  kibana:
    image: "kibana:8.1.3"
    container_name: "kibana"
    restart: unless-stopped
    ports:
      - "5601:5601"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    environment:
      ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - bridge
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.entrypoints=web"
      - "traefik.http.routers.kibana.rule=Host(` kibana.lan `)"

volumes:
   elastic_data: {}

networks:
   bridge: